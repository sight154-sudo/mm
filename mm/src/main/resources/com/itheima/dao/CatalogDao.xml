<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.dao.CatalogDao">
    <!--配置实体类属性和数据库表中列的对应关系-->
    <resultMap id="BaseResultMap" type="com.itheima.domain.Catalog">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="remark" property="remark"/>
        <result column="state" property="state"/>
        <result column="course_id" property="courseId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>

        <!--一个目录(题目类型)属于某一个学科,配置一对一关系-->
        <association
                property="course"
                column="course_id"
                javaType="com.itheima.domain.Course"
                select="com.itheima.dao.CourseDao.findById">

        </association>
    </resultMap>

    <!--配置查询的列名公共SQL语句-->
    <sql id="Base_Column_List">
        id, name, remark , state , create_time , course_id
    </sql>

    <!--配置查询所有-->
    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from st_catalog
    </select>

    <!--配置根据ID查询-->
    <select id="findById" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from st_catalog
        where id = #{id}
    </select>

    <!--配置根据id删除-->
    <delete id="delete" parameterType="java.lang.String">
        delete from st_catalog where id = #{id}
    </delete>

    <!--配置全字段插入，当某个字段没有值时，插入null-->
    <insert id="save" parameterType="com.itheima.domain.Catalog">
        insert into st_catalog (id, name, remark , state , create_time , course_id)
        values (#{id}, #{name}, #{remark},#{state} , now(), #{courseId})
    </insert>

    <!--配置全字段更新，当提供的数据为null时，数据库数据会被更新为null-->
    <update id="update" parameterType="com.itheima.domain.Catalog">
        update st_catalog
        set name = #{name},
        remark = #{remark},
        state = #{state},
        update_time = now(),
        course_id = #{courseId}
        where id = #{id}
    </update>
</mapper>